---
title: Enabling an External Blobstore
owner: BBR
---

`cf-deployment` provides BBR support for the backup and restore of external blobstores hosted on Amazon S3 or compatible storage
solutions, as long as they support S3 versioning.

The backup artifact only contains references to versions of blobs, not the actual files. As a consequence, **restores will only work if the original bucket still exists**. If the bucket gets
deleted, all
its versions will be deleted with it, and there will be no way to restore it (unless you have a
[replica](#restore-from-replicas)).


## <a id="enable-versioning"></a> Enable versioning on your external blobstore

BBR only supports the backup and restore of blobstores stored in versioned, S3-compatible buckets.
Please refer to the Amazon S3 documentation on
[how to enable versioning of your blobstore buckets](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/enable-versioning.html).

If your blobstore buckets are not empty, run the following command on each one of them, using the
[AWS CLI](https://aws.amazon.com/cli/):

```
aws s3 cp s3://<bucket-name>/ s3://<bucket-name>/ --recursive --metadata bump=true
```

This makes sure that each file in your buckets has a valid version ID.

## <a id="enable-backup-and-restore"></a> Enable backup and restore of external blobstores

To backup a Cloud Foundry deployment that uses an S3-compatible blobstore, colocate the
`s3-versioned-blobstore-backup-restorer` job from the
[`backup-and-restore-sdk-release`](https://github.com/cloudfoundry-incubator/backup-and-restore-sdk-release/tree/master)
as part of your deployment. If you are using [`cf-deployment`](https://github.com/cloudfoundry/cf-deployment)
 then you can include the `enable-backup-restore-s3.yml` opsfile in your deployment. You should apply
 `enable-backup-restore.yml` and `use-s3-blobstore.yml` before `enable-backup-restore-s3.yml`.
If you are not using `cf-deployment`, you can still refer to the opsfile for an example of how to
configure the job.

## <a id="supported-restore-scenarios"></a> Supported Restore Scenarios

### <a id="in-place-restore"></a> In-place restore
When backing up an
external blobstore, the backup consists of a snapshot of the objects' ids and versions.
If your destination Cloud Foundry for a restore uses the original buckets of the backed-up Cloud Foundry (i.e. you
are doing an in-place restore), then during a restore
those versions are retrieved and set to be the current versions in the buckets.

### <a id="restore-to-new-buckets"></a> Restore to new buckets

If your destination Cloud Foundry for a restore uses different buckets then you can also restore into
those buckets, provided the original buckets still exist. During restore the original versions are copied from the
original buckets to the destination buckets.

The destination buckets must be versioned. **Any files in the destination buckets that are not in the
backup artifact will be deleted.**

Ensure that the `s3-versioned-blobstore-backup-restorer` job is configured to point to the
destination buckets, and then run the `bbr` `restore` command.

### <a id="restore-from-replicas"></a> Restore from replicas

To protect yourself from losing your blobstore buckets, you might set up [Cross-Region Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html). Replication results in buckets that are identical to the original ones, including their version IDs. This will allow you to perform restores from the replicas, in case your original buckets are lost.

To do so, you will need to modify your backup artifacts to point to the replicas:

- move into the backup artifact directory
- extract the blobstore backup archive:

```
tar xvf backup-restore-0-s3-versioned-blobstore-backup-restorer.tar
```

- modify the `blobstore.json` to point to the replicated buckets
- recalculate the shasum of `blobstore.json`

```
shasum -a 256 blobstore.json
```

- update the metadata file entry for that `blobstore.json` with the new checksum.

- recreate the archive

```
tar cvf backup-restore-0-s3-versioned-blobstore-backup-restorer.tar blobstore.json
```

The backup artifact is now ready to be restored from the replicated buckets.
